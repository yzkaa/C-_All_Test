
#ifndef _LAB1_H_
#define  _LAB1_H_
#include <iostream>
#include <stdio.h> 

using namespace std ;

struct node
{
  int exp ;  
  int coef ; 
  struct node *next;  
};

typedef  struct node * PNODE ;


PNODE createPoly(void)
{

    /**********  Begin **********/
  int i=0;
  PNODE L,head;
  L=(PNODE)malloc(sizeof(node));
  L->next=NULL;
  PNODE p;
  head = L;
  printf("Please enter three items:\n");
  for(i=0;i<3;i++){
    p = (PNODE)malloc(sizeof(node));
    printf("Please enter exp:");
    scanf("%d",&p->exp);
    printf("Please enter coef");
    scanf("%d",&p->coef);
    p->next=NULL;
    head->next=p;
    head=p;
  }
  return L;
    
    /**********  End  **********/
} 
  
/*
   ???????????????脿?????脿??
   ????????addPoly
   ??????????polyAddLeft ????路篓脳贸卤??脿?????路????, polyAddRight????路篓??卤??脿?????路???? 
   路??????????貌?谩???脿???????路???? 
*/
PNODE addPoly(PNODE polyAddLeft , PNODE polyAddRight)
{
    //???????????煤?????????????????脿?????脿????路????谩???脿?????路??????????
    /**********  Begin **********/
  PNODE headr,headl,p,q;
  p=headr=polyAddRight;
  q=headl=polyAddLeft;
  for(headl=headl->next;headl!=NULL;headl=headl->next){
    if(headl->next==NULL){
      q=headl;
    }
    p=polyAddRight->next;
    headr=polyAddRight;
    while(p!=NULL){
      if(headl->exp==p->exp){
        headl->coef+=p->coef;
        headr->next=p->next;
        break;
      }
      headr=p;
      p=p->next;    
    }
  }

  q->next=polyAddRight->next;
  return polyAddLeft; 
    /**********  End **********/
}  
  
/*
   ???????????????脿???? 
   ????????printPoly
   ?????????????????脿???????路????poly 
   路????????? 
*/
 void printPoly(PNODE poly)
 {
 	//???????????煤??????????掳??????????脿?????????????????????霉???????梅 
    /**********  Begin **********/
  poly=poly->next;
  while(poly!=NULL){
    
    printf("%dx^%d\n",poly->coef,poly->exp);
    poly=poly->next;
  }
    /**********  End **********/
}  

#endif
//#include "linklist.h"

int main(void)
{
	PNODE  polyAddLeft, polyAddRight ,polyAddResult ;
	
	polyAddLeft = createPoly();
	cout<<polyAddLeft->next->coef<<polyAddLeft->next->exp<<polyAddLeft->next<<endl;
 	
 	polyAddRight = createPoly();
 	
 	polyAddResult = addPoly(polyAddLeft,polyAddRight);
 	printPoly(polyAddResult);
	free(polyAddLeft);
  free(polyAddRight);
  free(polyAddResult);
}