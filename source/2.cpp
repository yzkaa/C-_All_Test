#ifndef _LINKSET_H_
#define _LINKSET_H_
#include <iostream>
using namespace std;
typedef int DataType;

struct  node
{
    DataType  element;
    struct node  *next;
};
typedef struct node * SET;
void insert(DataType datax, SET set);

/*
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ InitSet
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ü£ï¿½ï¿½ï¿½ï¿½Ý²ï¿½ï¿½ï¿½numï¿½ï¿½ï¿½ï¿½Ê¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ôªï¿½ØµÄ¸ï¿½ï¿½ï¿½
  ï¿½ï¿½ï¿½ï¿½Öµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í·Ö¸ï¿½ï¿½
*/
SET InitSet(int num)
{

    SET p;
    p = new struct  node  ;
    p->next = NULL;
    p->element = num;
    int temp;
    for(int i =0;i<num;i++)
    {
        cin>>temp;
        insert(temp, p); //ï¿½ï¿½ï¿½ï¿½insertï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ý²ï¿½ï¿½ë¼¯ï¿½ï¿½
    }
    return p;
}


/*
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ find
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ü£ï¿½ï¿½Ú¼ï¿½ï¿½ï¿½ï¿½Ð²ï¿½ï¿½ï¿½ÖµÎªdataxï¿½Ä³ï¿½Ô±
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½datax:ï¿½ï¿½ï¿½ï¿½ï¿½Òµï¿½Öµ ï¿½ï¿½ setï¿½ï¿½ï¿½ï¿½ï¿½Ïµï¿½Í·ï¿½ï¿½ï¿?
  ï¿½ï¿½ï¿½ï¿½Öµï¿½ï¿½ï¿½Òµï¿½ÖµÎªdataxï¿½Ä³ï¿½Ô±ï¿½ï¿½ï¿½ï¿½1ï¿½ï¿½ï¿½ï¿½ï¿½ò·µ»ï¿½0
*/
int find(DataType datax, SET  set)
{
    //ï¿½ï¿½ï¿½Ú´Ë´ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ë£¬ï¿½ï¿½setï¿½ï¿½ï¿½ï¿½ï¿½Ð²ï¿½ï¿½ï¿½ÖµÎªdataxï¿½Ä³ï¿½Ô±ï¿½ï¿½ï¿½ï¿½ï¿½Òµï¿½ï¿½ï¿½ï¿½ï¿½1ï¿½ï¿½ï¿½ï¿½ï¿½ò·µ»ï¿½0
    /**********  Begin  **********/
    SET p = set->next;
    while(p!=NULL){
      if(p->element==datax){
        return 1;
      }
      p=p->next;
    }
    return 0;
    /**********   End   **********/
}

/*
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ insert
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ü£ï¿½ï¿½Ú¼ï¿½ï¿½ï¿½setï¿½Ð²ï¿½ï¿½ï¿½ÖµÎªdataxï¿½Ä³ï¿½Ô± ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î»ï¿½ï¿½ï¿½Ú±ï¿½Í·
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½datax:ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö? ï¿½ï¿½ setï¿½ï¿½ï¿½ï¿½ï¿½Ïµï¿½Í·ï¿½ï¿½ï¿?
  ï¿½ï¿½ï¿½ï¿½Öµï¿½ï¿½ï¿½ï¿½
*/
void insert(DataType datax, SET set)
{
    //ï¿½ï¿½ï¿½Ú´Ë´ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ë£¬ï¿½ï¿½dataxï¿½ï¿½ï¿½ë¼¯ï¿½ï¿½setï¿½ï¿½ ×¢ï¿½ï¿½ï¿½ò¼¯ºï¿½Ôªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä£ï¿½Ö»ï¿½è½«ï¿½Â³ï¿½Ô±ï¿½ï¿½ï¿½ï¿½ï¿½Í·
    /**********  Begin  **********/
    SET p = new node;
    p->element = datax;
    p->next=set->next;
    set->next=p;
    /**********   End   **********/
 }

/*
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ copyList
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ü£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½setAï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½É¼ï¿½ï¿½ï¿½setB
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½setA ï¿½ï¿½setBï¿½ï¿½Í·ï¿½ï¿½ï¿?
  ï¿½ï¿½ï¿½ï¿½Öµï¿½ï¿½ï¿½ï¿½
*/
void copySet(SET setA, SET setB)
{
    //ï¿½ï¿½ï¿½Ú´Ë´ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ë£¬Êµï¿½Ö½ï¿½ï¿½ï¿½ï¿½ï¿½setAï¿½Ä³ï¿½Ô±ï¿½ï¿½ï¿½Æµï¿½ï¿½ï¿½ï¿½ï¿½setBï¿½Ä¹ï¿½ï¿½ï¿½
    /**********  Begin  **********/
    setB->element += setA->element;
    SET B=setB;
    while(B->next!=NULL){
      B=B->next; 
    }
    B->next=setA->next;
    /**********   End   **********/
}

/*
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ printSet
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ü£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ïµï¿½Ôªï¿½Ø£ï¿½ï¿½Ô¿Õ¸ï¿½ï¿½ï¿½ÎªÔªï¿½ï¿½Ö®ï¿½ï¿½Ö½ï¿½ï¿?
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½setï¿½ï¿½Í·ï¿½ï¿½ï¿?
  ï¿½ï¿½ï¿½ï¿½Öµï¿½ï¿½ï¿½ï¿½
*/
void printSet(SET set)
{
    //ï¿½ï¿½ï¿½Ú´Ë´ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ë£¬Êµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ôªï¿½ØµÄ¹ï¿½ï¿½Ü£ï¿½Ôªï¿½ï¿½Ö®ï¿½ï¿½ï¿½Ô¿Õ¸ï¿½Îªï¿½Ö½ï¿½ï¿½
    /**********  Begin  **********/
  SET p=set->next;
  while(p!=NULL){
    cout<<" ";
    cout << p->element;
    p = p->next;
  }
  cout<<"ok";

    /**********  End  **********/
}

/*
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ setUnion
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ü£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½setA ï¿½ï¿½ setBï¿½Ä²ï¿½ï¿½ï¿½
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½setAï¿½ï¿½setBï¿½ï¿½Í·ï¿½ï¿½ï¿?
  ï¿½ï¿½ï¿½ï¿½Öµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ïµï¿½Í·ï¿½ï¿½ï¿?
*/
SET setUnion(SET setA ,SET setB)
{
    //ï¿½ï¿½ï¿½Ú´Ë´ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ë£¬ï¿½ï¿½Ö±ï¿½ï¿½Ê¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ñ¾ï¿½Êµï¿½ÖµÄ¸ï¿½ï¿½ï¿½ï¿½ï¿½
    /**********  Begin  **********/
    SET unionSet = new node;
    SET A = setA->next;
    SET B = setB;
    SET U = unionSet;
    unionSet->next = NULL;
    while (A!=NULL){
        if(find(A->element,B)==0){
          insert(A->element, U);
          U = U->next;
        }       
        A = A->next;
    }
    U->next = B->next;

    return unionSet;

    /**********  End  **********/
}

/*
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ setIntersect
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ü£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½setA ï¿½ï¿½ setBï¿½Ä½ï¿½ï¿½ï¿½
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½setAï¿½ï¿½setBï¿½ï¿½Í·ï¿½ï¿½ï¿?
  ï¿½ï¿½ï¿½ï¿½Öµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ïµï¿½Í·ï¿½ï¿½ï¿?
*/
SET setIntersect(SET setA ,SET setB)
{
    //ï¿½ï¿½ï¿½Ú´Ë´ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ë£¬ï¿½ï¿½Ö±ï¿½ï¿½Ê¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ñ¾ï¿½Êµï¿½ÖµÄ¸ï¿½ï¿½ï¿½ï¿½ï¿½
    /**********  Begin  **********/
    SET A = setA->next;
    SET B = setB;
    SET intersectSet = new node;
    intersectSet->next = NULL;
    while(A!=NULL){
        if(find(A->element,B)==1){
          insert(A->element, intersectSet);
        }
        A=A->next;
    }
    return intersectSet;

    /**********  End  **********/
}

/*
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ setExcept
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ü£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½setA ï¿½ï¿½ setBï¿½Ä²ï¿½
  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½setAï¿½ï¿½setBï¿½ï¿½Í·ï¿½ï¿½ï¿?
  ï¿½ï¿½ï¿½ï¿½Öµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ïµï¿½Í·ï¿½ï¿½ï¿½
*/
SET setExcept(SET setA ,SET setB)
{
    //ï¿½ï¿½ï¿½Ú´Ë´ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ë£¬ï¿½ï¿½Ö±ï¿½ï¿½Ê¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ñ¾ï¿½Êµï¿½ÖµÄ¸ï¿½ï¿½ï¿½ï¿½ï¿½
    /**********  Begin  **********/
    SET B = setB;
    SET exceptSet = new node;
    SET E = exceptSet;
    SET IntersectSet = setIntersect(setA,setB);
    exceptSet->next = NULL;
    copySet(setA, setB);
    B=B->next;
    while(B!=NULL){
      if(find(B->element,IntersectSet)==0){
        insert(B->element, E);
        E=E->next;
      }
      B=B->next;
    }
    return exceptSet;
    /**********  End  **********/
}

#endif
//#include "linkset.h"

int main(void)
{
	int count;
	cin>>count;
	SET setA = InitSet(count);
	cin>>count;
	SET setB = InitSet(count);
	cout<<"\nunion:";
  printSet(setUnion(setA,setB));
  cout<<"\nIN:";
	printSet(setIntersect(setA,setB)); 
	cout<<"\nEX:";
	printSet(setExcept(setA,setB));

}
